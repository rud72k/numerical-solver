# -*- coding: utf-8 -*-
"""swe_analytical_solution.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JTIA0w7SnY57hJIoAy67Zt6m3XMO4zOn
"""

#%% 
import numpy as np
from matplotlib import pyplot as plt

class SWEAnalytical:
    
    def __init__(self, g, h_inlet, h_outlet):
        self.g = g
        self.h_inlet = h_inlet
        self.h_outlet = h_outlet
        
    def dambreak_wet(self, x, t):
        pass
    
    def dambreak_dry(self, x, t):
        
        # x has to be an array of points
        # t is a number
        
        h1 = self.h_inlet
        g = self.g
        
        h = np.zeros(x.shape)
        h = np.where(x <= -t*np.sqrt(g*h1), h1, \
                     np.where(x <= 2*t*np.sqrt(g*h1), (4/(9*g))*(np.sqrt(g*h1) - x/(2*t))**2, h))
            
        u = np.zeros(x.shape)
        u = np.where((-t*np.sqrt(g*h1) < x) & (x <= 2*t*np.sqrt(g*h1)), (2/3)*(np.sqrt(g*h1) + x/t), u)
        
        return h, u

g, h_inlet, h_outlet = 9.8, 1.0, 0.0
analytical = SWEAnalytical(g, h_inlet, h_outlet)
x = np.linspace(-2,2,1001)
t = 0.1
h, u = analytical.dambreak_dry(x, t)

plt.plot(x, h)
plt.xlabel('x')
plt.ylabel('h')
plt.title('t = %.2f'%(t))

# plt.plot(x, u)
# plt.xlabel('x')
# plt.ylabel('u')
# plt.title('t = %.2f'%(t))
# %%
